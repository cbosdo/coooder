<?xml version="1.0" encoding="UTF-8"?>
<l:language xmlns:l="http://cedric.bosdonnat.free.fr/coooder/language/"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://cedric.bosdonnat.free.fr/coooder/language/ language.xsd " 	id="scheme" name="Scheme" objectOriented="false" escapeChar="\"><l:comments caseSensitive="false"><l:single id="comments_1"><l:opening>;</l:opening></l:single><l:multiple><l:opening>#|</l:opening><l:closing>|#</l:closing></l:multiple></l:comments><l:symbols><l:set id="symbols_0"><l:value>(</l:value><l:value>)</l:value><l:value>{</l:value><l:value>}</l:value><l:value>[</l:value><l:value>]</l:value><l:value>!</l:value><l:value>%</l:value><l:value>^</l:value><l:value>&amp;</l:value><l:value>/</l:value><l:value>+</l:value><l:value>-</l:value><l:value>*</l:value><l:value>=</l:value><l:value>&lt;</l:value><l:value>&gt;</l:value><l:value>;</l:value><l:value>|</l:value></l:set></l:symbols><l:quotemarks><l:value>&quot;</l:value></l:quotemarks><l:keywords><l:set id="keywords_1" caseSensitive="false"><l:value>abs</l:value><l:value>acos</l:value><l:value>and</l:value><l:value>angle</l:value><l:value>append</l:value><l:value>appply</l:value><l:value>approximate</l:value><l:value>asin</l:value><l:value>assoc</l:value><l:value>assq</l:value><l:value>assv</l:value><l:value>atan</l:value><l:value>begin</l:value><l:value>boolean?</l:value><l:value>bound-identifier=?</l:value><l:value>caar</l:value><l:value>caddr</l:value><l:value>cadr</l:value><l:value>call-with-current-continuation</l:value><l:value>call-with-input-file</l:value><l:value>call-with-output-file</l:value><l:value>call/cc</l:value><l:value>car</l:value><l:value>case</l:value><l:value>catch</l:value><l:value>cdddar</l:value><l:value>cddddr</l:value><l:value>cdr</l:value><l:value>ceiling</l:value><l:value>char-&gt;integer</l:value><l:value>char-alphabetic?</l:value><l:value>char-ci&lt;=?</l:value><l:value>char-ci&lt;?</l:value><l:value>char-ci?</l:value><l:value>char-ci&gt;=?</l:value><l:value>char-ci&gt;?</l:value><l:value>char-ci=?</l:value><l:value>char-downcase</l:value><l:value>char-lower-case?</l:value><l:value>char-numeric</l:value><l:value>char-ready</l:value><l:value>char-ready?</l:value><l:value>char-upcase</l:value><l:value>char-upper-case?</l:value><l:value>char-whitespace?</l:value><l:value>char&lt;=?</l:value><l:value>char&lt;?</l:value><l:value>char=?</l:value><l:value>char&gt;=?</l:value><l:value>char&gt;?</l:value><l:value>char?</l:value><l:value>close-input-port</l:value><l:value>close-output-port</l:value><l:value>complex?</l:value><l:value>cond</l:value><l:value>cons</l:value><l:value>construct-identifier</l:value><l:value>cos</l:value><l:value>current-input-port</l:value><l:value>current-output-port</l:value><l:value>d</l:value><l:value>define</l:value><l:value>define-syntax</l:value><l:value>delay</l:value><l:value>denominator</l:value><l:value>display</l:value><l:value>do</l:value><l:value>e</l:value><l:value>eof-object?</l:value><l:value>eq?</l:value><l:value>equal?</l:value><l:value>eqv?</l:value><l:value>even?</l:value><l:value>exact-&gt;inexact</l:value><l:value>exact?</l:value><l:value>exp</l:value><l:value>expt</l:value><l:value>else</l:value><l:value>f</l:value><l:value>floor</l:value><l:value>for-each</l:value><l:value>force</l:value><l:value>free-identifer=?</l:value><l:value>gcd</l:value><l:value>gen-counter</l:value><l:value>gen-loser</l:value><l:value>generate-identifier</l:value><l:value>identifier-&gt;symbol</l:value><l:value>identifier</l:value><l:value>if</l:value><l:value>imag-part</l:value><l:value>inexact-&gt;exact</l:value><l:value>inexact?</l:value><l:value>input-port?</l:value><l:value>integer-&gt;char</l:value><l:value>integer?</l:value><l:value>integrate-system</l:value><l:value>l</l:value><l:value>lambda</l:value><l:value>last-pair</l:value><l:value>lcm</l:value><l:value>length</l:value><l:value>let</l:value><l:value>let*</l:value><l:value>letrec</l:value><l:value>list</l:value><l:value>list-&gt;string</l:value><l:value>list-&gt;vector</l:value><l:value>list-ref</l:value><l:value>list-tail</l:value><l:value>list?</l:value><l:value>load</l:value><l:value>log</l:value><l:value>magnitude</l:value><l:value>make-polar</l:value><l:value>make-promise</l:value><l:value>make-rectangular</l:value><l:value>make-string</l:value><l:value>make-vector</l:value><l:value>map</l:value><l:value>map-streams</l:value><l:value>max</l:value><l:value>member</l:value><l:value>memq</l:value><l:value>memv</l:value><l:value>min</l:value><l:value>modulo</l:value><l:value>negative</l:value><l:value>newline</l:value><l:value>nil</l:value><l:value>not</l:value><l:value>null?</l:value><l:value>number-&gt;string</l:value><l:value>number?</l:value><l:value>numerator</l:value><l:value>odd?</l:value><l:value>open-input-file</l:value><l:value>open-output-file</l:value><l:value>or</l:value><l:value>output-port</l:value><l:value>pair?</l:value><l:value>peek-char</l:value><l:value>positive?</l:value><l:value>procedure?</l:value><l:value>quasiquote</l:value><l:value>quote</l:value><l:value>quotient</l:value><l:value>rational</l:value><l:value>rationalize</l:value><l:value>read</l:value><l:value>read-char</l:value><l:value>real-part</l:value><l:value>real?</l:value><l:value>remainder</l:value><l:value>return</l:value><l:value>reverse</l:value><l:value>s</l:value><l:value>sequence</l:value><l:value>set!</l:value><l:value>set-char!</l:value><l:value>set-cdr!</l:value><l:value>sin</l:value><l:value>sqrt</l:value><l:value>string</l:value><l:value>string-&gt;list</l:value><l:value>string-&gt;number</l:value><l:value>string-&gt;symbol</l:value><l:value>string-append</l:value><l:value>string-ci&lt;=?</l:value><l:value>string-ci&lt;?</l:value><l:value>string-ci=?</l:value><l:value>string-ci&gt;=?</l:value><l:value>string-ci&gt;?</l:value><l:value>string-copy</l:value><l:value>string-fill!</l:value><l:value>string-length</l:value><l:value>string-ref</l:value><l:value>string-set!</l:value><l:value>string&lt;=?</l:value><l:value>string&lt;?</l:value><l:value>string=?</l:value><l:value>string&gt;=?</l:value><l:value>string&gt;?</l:value><l:value>string?</l:value><l:value>substring</l:value><l:value>symbol-&gt;string</l:value><l:value>symbol?</l:value><l:value>syntax</l:value><l:value>syntax-rules</l:value><l:value>t</l:value><l:value>tan</l:value><l:value>template</l:value><l:value>transcript-off</l:value><l:value>transcript-on</l:value><l:value>truncate</l:value><l:value>unquote</l:value><l:value>unquote-splicing</l:value><l:value>unwrap-syntax</l:value><l:value>vector</l:value><l:value>vector-&gt;list</l:value><l:value>vector-fill!</l:value><l:value>vector-length</l:value><l:value>vector-ref</l:value><l:value>vector-set!</l:value><l:value>vector?</l:value><l:value>with-input-from-file</l:value><l:value>with-output-to-file</l:value><l:value>write</l:value><l:value>write-char</l:value><l:value>zero?</l:value></l:set></l:keywords><l:regexps></l:regexps><l:styles><l:style element="comments_1" color="808080" italic="true"/><l:style element="symbols_0" color="66cc66"/><l:style element="keywords_1" color="b1b100"/><l:style element="comment_multi" color="808080" italic="true"/><l:style element="string" color="ff0000"/><l:style element="number" color="cc66cc"/><l:style element="escaped" color="000099" bold="true"/></l:styles></l:language>