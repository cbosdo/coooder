<?xml version="1.0" encoding="UTF-8"?>
<l:language xmlns:l="http://cedric.bosdonnat.free.fr/coooder/language/"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://cedric.bosdonnat.free.fr/coooder/language/ language.xsd " 	id="vhdl" name="VHDL" objectOriented="false" escapeChar=""><l:comments caseSensitive="false"><l:single id="comments_1"><l:opening>--</l:opening></l:single><l:multiple><l:opening>%</l:opening><l:closing>%</l:closing></l:multiple></l:comments><l:symbols><l:set id="symbols_0"><l:value>[</l:value><l:value>]</l:value><l:value>(</l:value><l:value>)</l:value><l:value>;</l:value><l:value>:</l:value><l:value>&lt;</l:value><l:value>&gt;</l:value><l:value>=</l:value><l:value>&lt;=</l:value><l:value>:=</l:value><l:value>=&gt;</l:value><l:value>==</l:value></l:set></l:symbols><l:quotemarks><l:value>&quot;</l:value></l:quotemarks><l:keywords><l:set id="keywords_1" caseSensitive="false"><l:value>access</l:value><l:value>after</l:value><l:value>alias</l:value><l:value>all</l:value><l:value>assert</l:value><l:value>attribute</l:value><l:value>architecture</l:value><l:value>begin</l:value><l:value>block</l:value><l:value>body</l:value><l:value>buffer</l:value><l:value>bus</l:value><l:value>case</l:value><l:value>component</l:value><l:value>configuration</l:value><l:value>constant</l:value><l:value>disconnect</l:value><l:value>downto</l:value><l:value>else</l:value><l:value>elsif</l:value><l:value>end</l:value><l:value>entity</l:value><l:value>exit</l:value><l:value>file</l:value><l:value>for</l:value><l:value>function</l:value><l:value>generate</l:value><l:value>generic</l:value><l:value>group</l:value><l:value>guarded</l:value><l:value>if</l:value><l:value>impure</l:value><l:value>in</l:value><l:value>inertial</l:value><l:value>inout</l:value><l:value>is</l:value><l:value>label</l:value><l:value>library</l:value><l:value>linkage</l:value><l:value>literal</l:value><l:value>loop</l:value><l:value>map</l:value><l:value>new</l:value><l:value>next</l:value><l:value>null</l:value><l:value>of</l:value><l:value>on</l:value><l:value>open</l:value><l:value>others</l:value><l:value>out</l:value><l:value>package</l:value><l:value>port</l:value><l:value>postponed</l:value><l:value>procedure</l:value><l:value>process</l:value><l:value>pure</l:value><l:value>range</l:value><l:value>record</l:value><l:value>register</l:value><l:value>reject</l:value><l:value>report</l:value><l:value>return</l:value><l:value>select</l:value><l:value>severity</l:value><l:value>signal</l:value><l:value>shared</l:value><l:value>subtype</l:value><l:value>then</l:value><l:value>to</l:value><l:value>transport</l:value><l:value>type</l:value><l:value>unaffected</l:value><l:value>units</l:value><l:value>until</l:value><l:value>use</l:value><l:value>variable</l:value><l:value>wait</l:value><l:value>when</l:value><l:value>while</l:value><l:value>with</l:value><l:value>note</l:value><l:value>warning</l:value><l:value>error</l:value><l:value>failure</l:value><l:value>and</l:value><l:value>or</l:value><l:value>xor</l:value><l:value>not</l:value><l:value>nor</l:value><l:value>used</l:value><l:value>memory</l:value><l:value>segments</l:value><l:value>dff</l:value><l:value>dffe</l:value><l:value>help_id</l:value><l:value>mod</l:value><l:value>info</l:value><l:value>latch</l:value><l:value>rising_edge</l:value><l:value>falling_edge</l:value></l:set><l:set id="keywords_2" caseSensitive="false"><l:value>bit</l:value><l:value>bit_vector</l:value><l:value>character</l:value><l:value>boolean</l:value><l:value>integer</l:value><l:value>real</l:value><l:value>time</l:value><l:value>string</l:value><l:value>severity_level</l:value><l:value>positive</l:value><l:value>natural</l:value><l:value>signed</l:value><l:value>unsigned</l:value><l:value>line</l:value><l:value>text</l:value><l:value>std_logic</l:value><l:value>std_logic_vector</l:value><l:value>std_ulogic</l:value><l:value>std_ulogic_vector</l:value><l:value>qsim_state</l:value><l:value>qsim_state_vector</l:value><l:value>qsim_12state</l:value><l:value>qsim_12state_vector</l:value><l:value>qsim_strength</l:value><l:value>mux_bit</l:value><l:value>mux_vector</l:value><l:value>reg_bit</l:value><l:value>reg_vector</l:value><l:value>wor_bit</l:value><l:value>wor_vector</l:value><l:value>work</l:value><l:value>ieee</l:value><l:value>std_logic_signed</l:value><l:value>std_logic_1164</l:value><l:value>std_logic_arith</l:value><l:value>numeric_std</l:value></l:set></l:keywords><l:regexps><l:regexp id="regexp_0" value="(\b0x[0-9a-fA-F]+|\b\d[0-9a-fA-F]+[hH])|(\b\d+?(\.\d+?)?E[+\-]?\d+)|(\bns)|('[0-9a-zA-Z]+(?!'))"/><l:regexp id="regexp_1" value="\b(''\d'')"/></l:regexps><l:styles><l:style element="comments_1" color="008000" italic="true"/><l:style element="symbols_0" color="000066"/><l:style element="keywords_1" color="000080" bold="true"/><l:style element="keywords_2" color="0000ff"/><l:style element="regexp_0" color="ff0000"/><l:style element="regexp_1" color="ff0000"/><l:style element="comment_multi" color="008000" italic="true"/><l:style element="string" color="7f007f"/><l:style element="number" color="ff0000"/><l:style element="escaped" color="000099" bold="true"/></l:styles></l:language>