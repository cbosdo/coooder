<?xml version="1.0" encoding="UTF-8"?>
<l:language xmlns:l="http://cedric.bosdonnat.free.fr/coooder/language/"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xsi:schemaLocation="http://cedric.bosdonnat.free.fr/coooder/language/ language.xsd " 	id="haskell" name="Haskell" objectOriented="false" escapeChar="\"><l:comments caseSensitive="false"><l:single id="comments_1"><l:opening>--</l:opening></l:single><l:multiple><l:opening>{-</l:opening><l:closing>-}</l:closing></l:multiple></l:comments><l:symbols><l:set id="symbols_0"><l:value>|</l:value><l:value>-&gt;</l:value><l:value>&lt;-</l:value><l:value>@</l:value><l:value>!</l:value><l:value>::</l:value><l:value>_</l:value><l:value>~</l:value><l:value>=</l:value><l:value>?</l:value><l:value>&amp;&amp;</l:value><l:value>||</l:value><l:value>==</l:value><l:value>/=</l:value><l:value>&lt;</l:value><l:value>&lt;=</l:value><l:value>&gt;</l:value><l:value>&gt;=</l:value><l:value>+</l:value><l:value>-</l:value><l:value>*</l:value><l:value>/</l:value><l:value>%</l:value><l:value>**</l:value><l:value>^</l:value><l:value>^^</l:value><l:value>&gt;&gt;=</l:value><l:value>&gt;&gt;</l:value><l:value>=&lt;&lt;</l:value><l:value>$</l:value><l:value>.</l:value><l:value>,</l:value><l:value>$!</l:value><l:value>++</l:value><l:value>!!</l:value></l:set></l:symbols><l:quotemarks><l:value>&quot;</l:value></l:quotemarks><l:keywords><l:set id="keywords_1" caseSensitive="false"><l:value>as</l:value><l:value>case</l:value><l:value>of</l:value><l:value>class</l:value><l:value>data</l:value><l:value>default</l:value><l:value>deriving</l:value><l:value>do</l:value><l:value>forall</l:value><l:value>hiding</l:value><l:value>if</l:value><l:value>then</l:value><l:value>else</l:value><l:value>import</l:value><l:value>infix</l:value><l:value>infixl</l:value><l:value>infixr</l:value><l:value>instance</l:value><l:value>let</l:value><l:value>in</l:value><l:value>module</l:value><l:value>newtype</l:value><l:value>qualified</l:value><l:value>type</l:value><l:value>where</l:value></l:set><l:set id="keywords_2" caseSensitive="false"><l:value>Foreign</l:value><l:value>Numeric</l:value><l:value>Prelude</l:value></l:set><l:set id="keywords_3" caseSensitive="false"><l:value>not</l:value><l:value>otherwise</l:value><l:value>maybe</l:value><l:value>either</l:value><l:value>fst</l:value><l:value>snd</l:value><l:value>curry</l:value><l:value>uncurry</l:value><l:value>compare</l:value><l:value>max</l:value><l:value>min</l:value><l:value>succ</l:value><l:value>pred</l:value><l:value>toEnum</l:value><l:value>fromEnum</l:value><l:value>enumFrom</l:value><l:value>enumFromThen</l:value><l:value>enumFromTo</l:value><l:value>enumFromThenTo</l:value><l:value>minBound</l:value><l:value>maxBound</l:value><l:value>negate</l:value><l:value>abs</l:value><l:value>signum</l:value><l:value>fromInteger</l:value><l:value>toRational</l:value><l:value>quot</l:value><l:value>rem</l:value><l:value>div</l:value><l:value>mod</l:value><l:value>quotRem</l:value><l:value>divMod</l:value><l:value>toInteger</l:value><l:value>recip</l:value><l:value>fromRational</l:value><l:value>pi</l:value><l:value>exp</l:value><l:value>log</l:value><l:value>sqrt</l:value><l:value>logBase</l:value><l:value>sin</l:value><l:value>cos</l:value><l:value>tan</l:value><l:value>asin</l:value><l:value>acos</l:value><l:value>atan</l:value><l:value>sinh</l:value><l:value>cosh</l:value><l:value>tanh</l:value><l:value>asinh</l:value><l:value>acosh</l:value><l:value>atanh</l:value><l:value>properFraction</l:value><l:value>truncate</l:value><l:value>round</l:value><l:value>ceiling</l:value><l:value>floor</l:value><l:value>floatRadix</l:value><l:value>floatDigits</l:value><l:value>floatRange</l:value><l:value>decodeFloat</l:value><l:value>encodeFloat</l:value><l:value>exponent</l:value><l:value>significand</l:value><l:value>scaleFloat</l:value><l:value>isNaN</l:value><l:value>isInfinite</l:value><l:value>isDenomalized</l:value><l:value>isNegativeZero</l:value><l:value>isIEEE</l:value><l:value>atan2</l:value><l:value>subtract</l:value><l:value>even</l:value><l:value>odd</l:value><l:value>gcd</l:value><l:value>lcm</l:value><l:value>fromIntegral</l:value><l:value>realToFrac</l:value><l:value>return</l:value><l:value>fail</l:value><l:value>fmap</l:value><l:value>mapM</l:value><l:value>mapM_</l:value><l:value>sequence</l:value><l:value>sequence_</l:value><l:value>id</l:value><l:value>const</l:value><l:value>flip</l:value><l:value>until</l:value><l:value>asTypeOf</l:value><l:value>error</l:value><l:value>undefined</l:value><l:value>seq</l:value><l:value>map</l:value><l:value>filter</l:value><l:value>head</l:value><l:value>last</l:value><l:value>tail</l:value><l:value>init</l:value><l:value>null</l:value><l:value>length</l:value><l:value>reverse</l:value><l:value>foldl</l:value><l:value>foldl1</l:value><l:value>foldr</l:value><l:value>foldr1</l:value><l:value>and</l:value><l:value>or</l:value><l:value>any</l:value><l:value>all</l:value><l:value>sum</l:value><l:value>product</l:value><l:value>concat</l:value><l:value>concatMap</l:value><l:value>maximum</l:value><l:value>minimum</l:value><l:value>scanl</l:value><l:value>scanl1</l:value><l:value>scanr</l:value><l:value>scanr1</l:value><l:value>iterate</l:value><l:value>repeat</l:value><l:value>cycle</l:value><l:value>take</l:value><l:value>drop</l:value><l:value>splitAt</l:value><l:value>teakWhile</l:value><l:value>dropWhile</l:value><l:value>span</l:value><l:value>break</l:value><l:value>elem</l:value><l:value>notElem</l:value><l:value>lookup</l:value><l:value>zip</l:value><l:value>zip3</l:value><l:value>zipWith</l:value><l:value>zipWith3</l:value><l:value>unzip</l:value><l:value>unzip3</l:value><l:value>lines</l:value><l:value>words</l:value><l:value>unlines</l:value><l:value>unwords</l:value><l:value>showPrec</l:value><l:value>show</l:value><l:value>showList</l:value><l:value>shows</l:value><l:value>showChar</l:value><l:value>showString</l:value><l:value>showParen</l:value><l:value>readsPrec</l:value><l:value>readList</l:value><l:value>reads</l:value><l:value>readParen</l:value><l:value>read</l:value><l:value>lex</l:value><l:value>putChar</l:value><l:value>putStr</l:value><l:value>putStrLn</l:value><l:value>print</l:value><l:value>getChar</l:value><l:value>getLine</l:value><l:value>getContents</l:value><l:value>interact</l:value><l:value>readFile</l:value><l:value>writeFile</l:value><l:value>appendFile</l:value><l:value>readIO</l:value><l:value>readLn</l:value><l:value>ioError</l:value><l:value>userError</l:value><l:value>catch</l:value></l:set><l:set id="keywords_4" caseSensitive="false"><l:value>Bool</l:value><l:value>Maybe</l:value><l:value>Either</l:value><l:value>Ord</l:value><l:value>Ordering</l:value><l:value>Char</l:value><l:value>String</l:value><l:value>Eq</l:value><l:value>Enum</l:value><l:value>Bounded</l:value><l:value>Int</l:value><l:value>Integer</l:value><l:value>Float</l:value><l:value>Double</l:value><l:value>Rational</l:value><l:value>Num</l:value><l:value>Real</l:value><l:value>Integral</l:value><l:value>Fractional</l:value><l:value>Floating</l:value><l:value>RealFrac</l:value><l:value>RealFloat</l:value><l:value>Monad</l:value><l:value>Functor</l:value><l:value>Show</l:value><l:value>ShowS</l:value><l:value>Read</l:value><l:value>ReadS</l:value><l:value>IO</l:value></l:set><l:set id="keywords_5" caseSensitive="false"><l:value>IOError</l:value><l:value>IOException</l:value></l:set></l:keywords><l:regexps></l:regexps><l:styles><l:style element="comments_1" color="5d478b" italic="true"/><l:style element="symbols_0" color="339933" bold="true"/><l:style element="keywords_1" color="06c" bold="true"/><l:style element="keywords_2" color="06c" bold="true"/><l:style element="keywords_3" bold="true"/><l:style element="keywords_4" color="cccc00" bold="true"/><l:style element="keywords_5" color="aroon"/><l:style element="comment_multi" color="5d478b" italic="true"/><l:style element="string"/><l:style element="number" color="ed"/><l:style element="escaped" bold="true"/></l:styles></l:language>